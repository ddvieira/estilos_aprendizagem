{"version":3,"sources":["components/Header/index.js","pages/quiz/index.js","pages/home/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Main","props","createTable","table","i","questions","length","children","push","className","createLikertScale","idNumber","action","type","name","value","onClick","submiteAnswer","bind","pergunta","resposta","console","log","answers","state","answer1","answer2","answer3","answer4","answer5","answer6","targets","onChange","element","newValue","oldValue","options","stepSize","range","customButtons","up","style","down","backgroundColor","color","WebkitBoxSizing","WebkitBorderRadius","width","buttonsMargin","this","Component","Home","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.583ff7c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Header = () => (\r\n    // eslint-disable-next-line react/jsx-no-undef\r\n    <header id=\"main-header\">Questionário de Estilo de Aprendizagem</header>\r\n);\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n// import api from '../../services/api';\r\nimport './styles.css';\r\n// import { Link } from 'react-router-dom';\r\nimport FontSizeChanger from 'react-font-size-changer'\r\nimport VolumeUp from '@material-ui/icons/VolumeUp';\r\n// import Likert from 'react-likert-scale';\r\n// import { render } from 'react-dom';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            answer1: 0,\r\n            answer2: 0,\r\n            answer3: 0,\r\n            answer4: 0,\r\n            answer5: 0,\r\n            answer6: 0,\r\n        };\r\n    }\r\n\r\n    //Execute when page loads\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    createTable = () => {\r\n        let table = []\r\n\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < questions.length; i++) {\r\n            let children = []\r\n            //Inner loop to create children\r\n            children.push(<td>{`${i + 1}: ${questions[i]}`}</td>)\r\n            //Create the parent and add the children\r\n            table.push(<tr>{children}</tr>);\r\n            table.push(<i className=\"audio-icon far fa-play-circle\"></i>);\r\n            table.push(this.createLikertScale(i + 1));\r\n        }\r\n        return table\r\n    }\r\n\r\n    createLikertScale = (idNumber) => {\r\n        return (\r\n            <div className=\"wrap\">\r\n                <VolumeUp />\r\n                <form action=\"\">\r\n                    <ul className='likert' id={`${idNumber}`}>\r\n                        <li>\r\n                            <input type=\"radio\" name=\"likert\" value=\"1\" onClick={this.submiteAnswer.bind(this, idNumber, 1)} />\r\n                            <label>Concordo totalmente</label>\r\n                        </li>\r\n                        <li>\r\n                            <input type=\"radio\" name=\"likert\" value=\"2\" onClick={this.submiteAnswer.bind(this, idNumber, 2)} />\r\n                            <label>Concordo parcialmente</label>\r\n                        </li>\r\n                        <li>\r\n                            <input type=\"radio\" name=\"likert\" value=\"3\" onClick={this.submiteAnswer.bind(this, idNumber, 3)} />\r\n                            <label>Neutro</label>\r\n                        </li>\r\n                        <li>\r\n                            <input type=\"radio\" name=\"likert\" value=\"4\" onClick={this.submiteAnswer.bind(this, idNumber, 4)} />\r\n                            <label>Discordo parcialmente</label>\r\n                        </li>\r\n                        <li>\r\n                            <input type=\"radio\" name=\"likert\" value=\"5\" onClick={this.submiteAnswer.bind(this, idNumber, 5)} />\r\n                            <label>Discordo totalmente</label>\r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    submiteAnswer = (pergunta, resposta) => {\r\n        console.log(\"pergunta: \" + pergunta);\r\n        console.log(\"resposta: \" + resposta);\r\n\r\n        answers[pergunta-1] = resposta;\r\n        console.log(answers);\r\n        console.log();\r\n    }\r\n\r\n    //Keep listening to var state \r\n    render() {\r\n\r\n        return (\r\n            <div className='questions-list' >\r\n                <i className=\"far fa-play-circle\"></i>\r\n                <i className=\"far fa-play-circle\"></i>\r\n                <div className=\"app\">\r\n                    <FontSizeChanger\r\n                        targets={['#target .content']}\r\n                        onChange={(element, newValue, oldValue) => {\r\n                            console.log(element, newValue, oldValue);\r\n                        }}\r\n\r\n                        options={{\r\n                            stepSize: 2, //stepSize = font size\r\n                            range: 4 //range = stepts to change\r\n                        }}\r\n                        customButtons={{\r\n                            up: <span style={{ 'fontSize': '36px' }}>A</span>,\r\n                            down: <span style={{ 'fontSize': '20px' }}>A</span>,\r\n                            style: {\r\n                                backgroundColor: 'red',\r\n                                color: 'white',\r\n                                WebkitBoxSizing: 'border-box',\r\n                                WebkitBorderRadius: '5px',\r\n                                width: '60px'\r\n                            },\r\n                            buttonsMargin: 10\r\n                        }}\r\n                    />\r\n                    <div id=\"target\">\r\n                        <p className=\"title\">Responda o questionário abaixo:</p>\r\n                        <table className=\"content\">\r\n                            <thead>\r\n\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.createTable()}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"actions\" >\r\n                    <button onClick={this.submiteAnswer}>Submit</button>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nlet questions = ['Você gosta de site com textos?',\r\n    'Você prefere conteúdo que seja em vídeo?',\r\n    'Você prefere conteúdo com audio?',\r\n    'Você prefere texto grande?',\r\n    'Você prefere que os vídeos tenham legendas?',\r\n    'Você prefere que tenha?'];\r\n\r\nlet answers = [];\r\n\r\n","import React, { Component } from 'react';\r\n// import LikertScale from 'likert-react';\r\n\r\nexport default class Home extends Component {\r\n\r\n    render() {\r\n        // const onClick = (q, n) => console.info('question: ' + q + ' answer: ' + n);\r\n        // const reviews = [\r\n        //     { question: 'Code is readable' },\r\n        //     { question: 'Tests are comprehensive' },\r\n        //     { question: 'Webpack is configured well' }\r\n        //   ];\r\n\r\n        return(\r\n        // <LikertScale\r\n        //     reviews={reviews}\r\n        //     onClick={onClick}\r\n        //     full-line\r\n        // />\r\n        <div></div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Main from './pages/quiz';\r\nimport Home from './pages/home'\r\n\r\nconst Routes = () => (\r\n    // Dois componentes sejam exibidos quando a rota for acessado\r\n    <BrowserRouter>\r\n        {/* Força que apenas uma rota seja chamada ao mesmo tempo */}\r\n        <Switch>\r\n            {/* exact -> Verifica se a url é exatamente igual ao path */}\r\n            <Route exact path=\"/\" component = {Main}/>\r\n            <Route path=\"/home\" component = {Home}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n\r\n","import React from 'react';\n\nimport Header from './components/Header';\nimport Routes from './routes';\n\n\nconst App = () => (\n  <div className = 'App'>\n\n    <Header/>\n    <Routes />\n  </div>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import '../node_modules/@fortawesome'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}