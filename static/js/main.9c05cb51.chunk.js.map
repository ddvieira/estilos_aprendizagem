{"version":3,"sources":["components/Header/index.js","services/api.js","pages/quiz/index.js","pages/home/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseURL","Main","state","products","loadProducts","a","get","response","setState","data","docs","prevPage","nextPage","this","className","map","key","_id","title","description","href","to","Component","Home","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAQeA,G,MAJA,kBACX,4BAAQC,GAAG,eAAX,+C,uFCCWC,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,6CCEQC,G,iNACjBC,MAAQ,CACJC,SAAU,I,EAQdC,a,sBAAe,4BAAAC,EAAA,sEAGYR,EAAIS,IAAI,aAHpB,OAGLC,EAHK,OAMX,EAAKC,SAAS,CAACL,SAAUI,EAASE,KAAKC,OAN5B,2C,EASfC,SAAW,a,EAIXC,SAAW,a,mFAhBPC,KAAKT,iB,+BAqBA,IACGD,EAAaU,KAAKX,MAAlBC,SAER,OACI,yBAAKW,UAAU,iBACVX,EAASY,KAAI,SAAAZ,GAAQ,OAElB,6BAASa,IAAOb,EAASc,KACrB,gCAASd,EAASe,OAClB,2BAAIf,EAASgB,aAEb,uBAAGC,KAAK,IAAR,iBAIR,yBAAKN,UAAU,WACX,kBAAC,IAAD,CAAMO,GAAG,SAAT,c,GA5CcC,cCHbC,E,iLAEb,OAAO,2C,GAFmBD,aCgBnBE,EAZA,kBAEX,kBAAC,IAAD,KAEI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAa1B,IACnC,kBAAC,IAAD,CAAOyB,KAAK,QAAQC,UAAaJ,OCE9BK,EATH,kBACV,yBAAKd,UAAY,OAEf,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c05cb51.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst Header = () => (\r\n    <header id=\"main-header\">Questionário de Estilo de Aprendizagem</header>\r\n);\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://rocketseat-node.herokuapp.com/api'\r\n})\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport './styles.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Main extends Component{\r\n    state = {\r\n        products: []\r\n    }\r\n\r\n    //Execute when page loads\r\n    componentDidMount(){\r\n        this.loadProducts();\r\n    }\r\n\r\n    loadProducts = async () => {\r\n        //Get all the products from the api setted before\r\n        //Using the library axios\r\n        const response = await api.get('/products');\r\n        \r\n        //Set value from api to var state\r\n        this.setState({products: response.data.docs});\r\n    };\r\n\r\n    prevPage = () => {\r\n\r\n    };\r\n\r\n    nextPage = () => {\r\n\r\n    };\r\n\r\n    //Keep listening to var state \r\n    render(){\r\n        const { products } = this.state;\r\n\r\n        return (\r\n            <div className='products-list'>\r\n                {products.map(products => (\r\n                    //When using map should has a unique key on each object\r\n                    <article key = {products._id}>\r\n                        <strong>{products.title}</strong>\r\n                        <p>{products.description}</p>\r\n\r\n                        <a href=\"\"> Acessar </a>\r\n                    </article>\r\n                ))}\r\n\r\n                <div className=\"actions\">\r\n                    <Link to=\"/home\">Home</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component{\r\n    render(){\r\n        return <h1>Welcome</h1>\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport Main from './pages/quiz';\r\nimport Home from './pages/home'\r\n\r\nconst Routes = () => (\r\n    // Dois componentes sejam exibidos quando a rota for acessado\r\n    <BrowserRouter>\r\n        {/* Força que apenas uma rota seja chamada ao mesmo tempo */}\r\n        <Switch>\r\n            {/* exact -> Verifica se a url é exatamente igual ao path */}\r\n            <Route exact path=\"/\" component = {Main}/>\r\n            <Route path=\"/home\" component = {Home}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n\r\n","import React from 'react';\n\nimport Header from './components/Header';\nimport Routes from './routes';\n\n\nconst App = () => (\n  <div className = 'App'>\n\n    <Header/>\n    <Routes />\n  </div>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}